O programa imprime "Hello\n" na tela.

_start

É definido pela ABI que o ponto de entrada será a função _start, e o linker segue essa convenção.

A seção de dados armazena as variáveis globais inicializadas. As strings p1 e p2 foram armazenadas nessa seção porque o programador deciciu deixá-las globais e inicializadas pela diretiva db (define bytes).

Nesse caso, a função _start (o ponto de entrada) somente chama a main e retorna 1 para o processo pai. Em geral, a _start pode preparar alguns aspectos do ambiente de execução (por exemplo o tamanho da pilha) e retornar para o processo pai o valor retornado pela função main.

As linhas correspondem ao prólogo e epílogo, cuja função é armazenar corretamente os valores do stack pointer e backup pointer antes da execução da função para que possa, ao final da função, retornar ao estado inicial e preservar a pilha de retorno (através do pop no ponteiro ebp).

No caso da função write, é possível omitir essas linhas porque é uma função folha; ou seja, não chama nenhuma outra função. Como nenhuma outra função é chamada, não é necessário fazer backup do stack pointer no registrador ebp.

C declarations, já que a função chamadora (main) "limpa" a pilha (add esp, 8) após a chamada de write.

A linha add esp, 8 deveria ser add esp, 12 porque a função write recebeu 3 argumentos de 4 bytes cada.

add esp, 12

Não, já que não preserva o valor do registrador EBX.

O binário provindo do .asm não utiliza nenhuma biblioteca linkada dinamicamente, então o tipo do arquivo é diferente do binário provindo do .c, já que esse necessita chamar a função write que está linkada dinamicamente na biblioteca <unistd.h>.

Ela chama o endereço 0x804902b, correspondente à função write implementada no .asm.

Ela chama o endereço 0x11cb (o endereço seguinte). A tabela global de offsets indica que o endereço 0x11cb deverá ser substituido pelo endereço do símbolo "write", que está na GLIBC. Quando o programa é carregado, a syscall exec chama o loader dinâmico para substituir esses símbolos pelos valores corretos logo antes da execução.

Ela chama o endereço 0x1050 (função write@plt) depois de fazer o procedimento para ler o valor do instruction pointer no registrador EBX. A função write@plt, da primeira vez que é chamada, chama o linker dinâmico, que substitui na tabela global de offsets do programa "cliente" o offset correto da função chamada (nesse caso a write). As próximas vezes que write@plt for chamada, ela irá dar jump para o offset correto da função.

O código independente de posição possui mais versatilidade já que diversos programas podem executar as funções disponibilizadas pela lib sem que ela tenha que ser carregada na memória diversas vezes (somente uma cópia parcial é criada, a tabela global de símbolos da lib). O código relocável, por outro lado, é mais eficiente em sua execução (e mais lento em seu carregamento), já que não realiza os procedimentos redundantes (necessários para ter a independência de posição) e acessa diretamente o endereço, já que esses endereços são substituídos em tempo de load.